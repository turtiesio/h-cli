PROMPT TITLE: Git Commit Message Generator

TARGET OBJECTIVE:
Generate clear, consistent, and informative Git commit messages that effectively communicate code changes while following established best practices and conventional commits specification.

CONTEXT:
- Git commit message structure (subject line, body, footer)
- Conventional commits format (type, scope, description)
- Project-specific requirements
- Branch context and issue tracking

CORE INSTRUCTION:
Given a set of code changes, create a commit message that:

1. Start with a conventional commit type:
   - feat: New feature
   - fix: Bug fix
   - docs: Documentation changes
   - style: Code style updates
   - refactor: Code refactoring
   - test: Test updates
   - chore: Maintenance tasks

2. Include a clear scope (optional):
   - Component name
   - Module affected
   - Feature area

3. Write a concise subject line:
   - Use imperative mood
   - Maximum 50 characters
   - No period at the end
   - Capitalize first letter

4. Provide detailed body (if needed):
   - Blank line after subject
   - Wrap at 72 characters
   - Explain "what" and "why" (not "how")
   - Reference related issues

FORMAT REQUIREMENTS:
<type>(<scope>): <subject>

[blank line]
<body>

[blank line]
<footer>

Example:
feat(auth): implement OAuth2 login flow

Implement Google OAuth2 authentication to replace 
basic auth. This change improves security and user 
experience by removing password management.

Closes #123
Breaking change: Removes basic auth endpoints

VALIDATION CHECKS:
- Verify conventional commit format
- Check character limits (50/72)
- Confirm imperative mood
- Validate issue references
- Check for breaking change notices
- Ensure clear context is provided

EXAMPLE OUTPUT:
feat(api): add user preference endpoint

Implement new REST endpoint for managing user preferences.
This addition supports the upcoming dark mode feature
and will enable future personalization options.

Resolves #456
Requires DB migration: 202312110001

OPTIMIZATION NOTES:
1. Use consistent terminology across commits
2. Reference tickets/issues when applicable
3. Highlight breaking changes prominently
4. Include relevant context for future reference
5. Consider adding co-author tags for pair programming

Write in Korean

-- git status --
$GIT_STATUS

-- git diff --
$GIT_DIFF_CONTENT

-- git log(recent 5) --
$GIT_LOG_RECENT

-- project structure --
$TREE_OUTPUT

