# Python CLI Project Development Guidelines (Using Typer)

## Project Configuration

- **Package Manager:** `ux` (strictly enforced).
  - _Justification:_ Assuming `ux` is a custom or internal package manager, this enforces its use.
- **Logger:** `structlog` with `json` formatter (strictly enforced).
  - _Justification:_ `structlog` for structured logging and JSON for machine-readable log analysis.
- **API Documentation:** Not Applicable (CLI Project).
  - _Justification:_ CLI applications do not typically have an API, so OpenAPI is not required.
- **Documentation Generator:** Sphinx with `reStructuredText` for comprehensive documentation, _especially for CLI usage and commands_.
  - _Justification:_ Sphinx remains the standard tool for comprehensive documentation but will focus on explaining CLI usage.
- **Git Hooks:** `pre-commit` for managing Git hooks.
  - _Justification:_ `pre-commit` for ensuring hooks are run before commits.

## Coding Standards

1. **Architecture Principles**

   - SOLID principles implementation (adapted to Python).
   - Clean Architecture patterns (where applicable for a CLI).
   - Clean Code practices (PEP 8 standards).
   - KISS (Keep It Simple, Stupid).
   - DRY (Don't Repeat Yourself).
   - YAGNI (You Aren't Gonna Need It).
     - _Justification:_ These principles apply to any type of application.

2. **Code Documentation**

   - Sphinx integration for all:
     - Modules
     - Classes
     - Functions
     - CLI Commands and Options
     - _Justification:_ Sphinx documentation will focus on internal modules and CLI interface.
   - Inline documentation using docstrings (Google or NumPy style).
     - _Justification:_ Python uses docstrings for inline documentation.
   - Clear naming conventions for:
     - Functions (snake_case, descriptive; verb + noun: `create_user`, `validate_input`).
     - Variables (snake_case, descriptive).
     - Modules (feature-based naming).
     - Classes (PascalCase, descriptive).
     - Typer commands (snake_case, descriptive)
       - _Justification:_ I have adapted names to the standards for Python.

3. **Testing Framework**
   - Unit Tests: `pytest`.
   - Integration Tests: `pytest`.
   - E2E Tests: `pytest` with `pytest-mock` or similar for simulating CLI inputs and capturing outputs.
     - _Justification:_ `pytest` is a powerful and flexible testing framework for Python. E2E tests for CLI require simulating inputs and reading outputs.
   - Test files naming: `test_*.py` for unit/integration, `test_e2e_*.py` for E2E.
     - _Justification:_ Common test naming pattern for python with pytest.
4. **Development Tools**

   - Python (latest stable version, strict mode enabled with mypy).
   - `flake8` for linting, `black` for formatting.
     - _Justification:_ `flake8` is a comprehensive linter. `black` is a popular formatter to ensure consistency in the code base.
   - `pre-commit` for git hooks.
     - _Justification:_ To avoid manual creation of scripts.
   - Logging: JSON format using `structlog`.
     - _Justification:_ As detailed above.
   - `Makefile` or `justfile` for common commands:

     ```bash
     build:
     format:
     start:
     start-dev:
     start-debug:
     start-prod:
     lint:
     test:
     test-watch:
     test-cov:
     test-debug:
     test-e2e:
     ```

     - _Justification:_ Same as the original prompt, and a `justfile` is a modern alternative to `Makefile` in some cases.

5. **Write and update `README.md` (or `README.rst`)**

   - _Justification:_ Same as the original.

6. **Logging Standards**

   ```python
   {
       "timestamp": "ISO8601",
       "level": "log|fatal|error|warn|info|debug|verbose",
       "context": "string",
       "message": "string",
       "metadata": {},
   }

   # fatal: "Critical error requiring application shutdown",
   # error: "Business logic failures, exceptions thrown",
   # warn: "Potential issues, performance degradation",
   # info: "Important business events",
   # debug: "Detailed information for development debugging",
   # verbose: "Most detailed application operational information"
   ```

   - JSON structured logging.
   - Detailed metadata logging.
   - Redact sensitive information.
   - Use `debug` and `verbose` levels where appropriate.
     - _Justification:_ Same as original with Python syntax.
